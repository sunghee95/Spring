package kr.or.ddit.controller;

import org.springframework.stereotype.Controller;

@Controller

public class JSPHomeController {
	/*
	 * 7장. JSP
	 * 
	 * 1. 지시자
	 * - 지시자(directive)는 JSP페이지에 대한 설정 정보를 지정할 때 사용한다
	 * - JSP가 제공하는 지시자에는 page지시자, taglib지시자, include 지시자 세가지가 있따
	 * 
	 *  	1) page지시자
	 *  		- JSP 페이지에 대한 정보를 지정한다 
	 *  		
	 *  			속성  	    |       설명
	 *  	________________________________________________________________________
	 *  		contentType 	| 	JSP가 생설할 문서의 MIME 타입과 문자 코드를 지정
	 *  		pageEncoding 	| 	JSP페이지 자체의 문자 코드를 지정한
	 *  		session		 	| 	JSP페이지가 세션을 사용할지의 여부를 지정
	 *  		import		 	| 	JSP페이지에서 사용할 자바 클래스를 지정 
	 * 		________________________________________________________________________
	 * 
	 *  	2) taglib지시자
	 *  		- JSP 페이지에서 사용할 태그 라이브러리를 지정
	 *  		
	 *  			속성  	    |       설명
	 *  	________________________________________________________________________
	 *  		prefix		 	| 	태그 라이브러리를 호출 할 때 사용할 접두어를 지정 
	 *  		uri			 	| 	TLD 파일이 위치한 URL 혹은 파일 경로를 지정
	 * 		________________________________________________________________________
	 * 
	 *  	3) include지시자
	 *  		- JSP 페이지의 특정 영역에 다른 문서를 포함
	 *  		
	 *  			속성  	    |       설명
	 *  	________________________________________________________________________
	 *  		file		 	| 	포함할 파일의 경로를 지정 
	 * 		________________________________________________________________________
	 * 
	 * 2. 스크립틀릿
	 *  - 스크립틀릿(Scriptlet)은 JSP페이지에서 자바 코드를 실행할 때 사용하는 코드의 블록
	 *  - 스크립틀릿 코드 블록은 <% 와  %>사이, 그리고 <%=  와  %> 사이에 자바 코드를 포함할 수 있다
	 *  - 현재는 스크립틀릿을 사용하기 보다는 JSTL과 같은 커스텀 태그 라이브러리와 EL을 조합해서 JSP를 구현하는 방법을 많이 사용 
	 *  
	 * 
	 * 3. 커스텀 태그 라이브러리
	 * - 스크립트 요소가 많아지면 많아질수록 JSP 코드는 복잡해진다
	 * 이 문제를 해결하는 한가지 방법은 커스텀 태그를 사용하는 것이다
	 * 커스텀 태그를 사용하면 뷰를 표시하기 위한 로직을 공통화하거나, 표현하기 복잡한 로직을 캡슐화 할 수 있어서 JSP의 구현 코드르 간결하게 만들 수 있다
	 * 그리고, 커스텀 태그를 모아 놓은 것을 커스텀 태그 라이브러리라고 한다
	 * 	 
	 * # 대표적인 태그 라이브러리 
	 * - JSTL(JavaServer Pages Standard Tag Library)
	 * - spring-form JSP Tag Library
	 * - spring JSP Tag Library
	 * - spring Security JSP Tag Library
	 * 
	 * 4. 표현언어(EL)
	 * - JSP는 EL(Expression Language)이라는 표현 언어를 사용해 값의 참조, 출력, 연산을 할 수 있다
	 * - EL식은 ${...} 또는 #{...} 형식으로 작성
	 * 
	 * # EL을 사용하여 객체를 조회하는 방법은 다음과 같다
	 * - 자바빈즈 프로퍼티를 조회하는 겨우 "속성명.프로퍼티명"을 지정한다
	 * - List나 배열 요소를 조회하는 경우"속성명[요소위치]"를 지정한다
	 * - Map 요소를 조회하는 경우 "속성명.키명" 또는 "속성명[키명]을 지정한다
	 * 
	 * # 사용 가능한 연산자
	 * - EL에서는 다음과 같은 연산자를 사용할 수 있다
	 * 
	 * 		# 산술 연산자
	 * 			+ 	|  	- 	 |     *   | /(div)  |  %(mod)
	 * 		_______________________________________________
	 * 		     더하기  |   빼기    |   곱하기   |  나누기      | 나머지 
	 * 
	 * 		# 비교 연산자 
	 * 		
	 * 			연산자 			|       설명
	 * 		_______________________________________________________
	 * 			==(eq)			|  같은 값인지 비교  
	 * 			!=(ne)			|  다른 값인지 비교
	 * 			<=(le)			|  왼쪽이 작거나 같은 값인지 비교  
	 * 			>=(ge)			|  왼쪽이 크거나 같은 값인지 비교   
	 * 			<(lt)			|  왼쪽이 작은 값인지 비교  
	 * 			>(gt)			|  왼쪽이 큰 값인지 비교 
	 * 
	 *  	#empty 연산자
	 *   		- null이거나 공백(문자열의 경우 공백 문자) 인지 비교 
	 *   
	 *   	[true 조건 :::]
	 *   		- null값, 빈 문자열(" "), 길이가 0인 배열, 빈 collection
	 *   
	 *   	# 논리 연산자 
	 *   		연산자  		|      설명
	 *  	 ________________________________________________________________________________
	 *  		 &&(and)    | 두 피 연산자 모두 true이면 bool true를 반환하고, 그렇지 않으면 false반환 
	 *   		 ||(or)     | 두 피 연산자 중 하나 또는 모두 true이면 bool true를 반환하고, 그렇지 않으면 false반환 
	 *   		 !(not)     | 해당 피연산자의 의미를 반대로 바꿈
	 *   
	 *   	
	 *   
	 *   
	 *   	
	 *  
	 */	
}
