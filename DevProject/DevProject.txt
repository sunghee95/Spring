[1장. 스프링 개발 환경]
	
	JDK 1.8, Tomcat 8.5.x, Oracle 11g xe


[2장. 프로젝트 생성]
	  
	  스프링 MVC 구조 
	  
	  	1. 스프링 MVC 구조
	  		
	  		스프링 MVC는 DispatcherServlet, View Resolver, Handler, View등으로 구성되어있따.
	  		
	  	2. 스프링 MVC 프로젝트 생성 
	  		Spring Legacy Project(Spring MVC Project Template)생성 
	  		프로젝트명 : DevProject(본인이 하고 싶은 프로젝트명)
	  		template : Spring MVC Project
	  		package : kr.or.ddit (여기서 설정하는 패키지는 프로젝트의 base package 경로가 된다)
	  	
	  	3. MVC 프로젝트 파일 구성
	  		
	  		프로젝트를 새로 구성하면 관련 파일들과 폴더들이 자동으로 생성된다.
	  		
	  		[구성요소]
	  		- pom.xml									: 메이븐 프로젝트 빌드 파일 
	  		- src/main/java								: 자바 소스 경로 
	  		- src/main/resources						:  리소스 파일 경로
	  		- src/../WEB-INF/web.xml					:  웹 컨테이너 설정 파일 
	  		- src/../WEB-INF/spring/root-context.xml			:  스프링 설정 파일  
	  		- src/../WEB-INF/spring/abbServlet/servlet-context.xml			:  스프링 웹 설정 파일 
	  		- src/../WEB-INF/views			:  뷰 파일 경로 
	  		
	  	
	  	4. 로그 레벨 설정 
	  	
	  		Log4j 구성 요소 
	  		
	  			요소       		 | 						설명 
	  		____________________________________________________________________
	  			Logger 		 | 출력할 메세지를 Appender에 전달
	  			Appender	 | 전달된 로그를 어디에 출력할지 결정 ( 콘솔 출력, 파일기로그, DB저장) 	
	  			Layout  	 | 로그를 어떤 형식으로 출력할지 결정 
	  		____________________________________________________________________
	  		
	  		
	  		
	  		Log4j 레벨 
	  		출력 레벨 설정에 따라 설정 레벨 이상의 로그가 출력 
	  		
	  			로그 레벨     | 						설명 
	  		___________________________________________________________________________________
	  			FATAL 	 |  	 아주 심각한 에러가 발생한 상태 
	  			ERROR	 | 어떠한 요청을 처리하는 중 문제가 발생한 상태 	
	  			WARN	 | 프로그램의 실행에는 문제가 없지만, 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지를 나타냄 
	  			INFO	 | 어떠한 상태변경과 같은 정보성 메세지를 나타냄  
	  			DEBUG	 |  개발 시 디버그 용도로 사용하는 메세지를 나타냄  
	  			TRACE	 |  디버그 레벨이 너무 광범위한 것을 해결하기 위해 좀 더 상세한 이벤트를 나타냄   
	  		____________________________________________________________________________________
	  		
	  		
_________________________________________________________________________________________________________

	SPRING2 진행 내용 
	
		개발시 사용하고 있는 STS는 3.9.15.REALEASE 버전에 해당하며, eclipse e4.16 버전에 해당 
		다양한 STS(e_version)버전들이 존재하지만, 우리가 사용하는 JDK1.8 버전과 Spring Framework 호환성의 문제가 가장 적은
		3.9.15 버전을 선택해 사용중
		
		1. STS 3.9.15	TOOL 설치 후 진행 
		2. workspace 경로 설정 후 STS 진입 
		3. enc, font 설정 
			> enc는 UTF-8 설정 
			> 폰트는 맘대로
		4. 웹서버 실행 환경 설정 
			> window > preferences > server > runtime Environments
			> 기존 등록되어 있는 vm 서버 설정은 삭제
			> 우리가 사용하고자 하는 apache-tomcat 8.5v로 설정
			> Add 버튼 클릭 후, tomcat 8.5 추가 
			> 추가시, tomcat 폴터까지 선택 후 추가(사용 JDK선택)	
		5. Eclipse Java 설정
			> window > preferences > Java > Installed JREs
			> 기존 JRE는 삭제
			> 우리가 사용하고 있는 버전의  JDK 폴더를 찾아서 bin 폴더 선택 후 추가 	  		
	  
	  	6. 스프링 프로젝트 생성 
	  		> Spring legacy project 생성 
	  		> 프로젝트 명 , 패키지, templte 선택 후 진행
	  			프로젝트명 : DevProject
	  			패키지 : kr.or.ddit
	  			template : Spring MVC Project 
	  			
	  	7. MVC 프로젝트 파일 구성 확인하기 		
	  		> web.xml, pom.xml, root-context/servlet-context.xml, webapp 등등 관련 파일들이 존재하는지 확인 
	  		> 간혹 MVC Project가 잘못 생성되어 관련 파일들이 여러개 누락되어 있는 경우가 있으니 꼭 확인할 것 
	  	
	  	8. 웹 서버 설정 변경 
	  		>server의 overview > timeout 120초 설정 / port 80 설정
	  		>server의 module > path '/' 변경 
	  	
	  	9. 개발환경 버전 변경 
	  		> pom.xml 변경 
	  		> dependency중 , servlet api에 해당하는 버전과 artifactid를 변경한다
		  		> artifactid : javax.servlet-api
		  		> version : 3.1.0
		  	> java-version과 springframework 버전 변경 
		  		>java : 1.8
		  		>springframework : 5.3.25
		  	
		  	*** pom.xml을 변경했다면 해당 프로젝트 maven 설정을 반영 
		  		프로젝트 우클릭 > run as >  maven clean > maven build 진행 (Goals : compile 설정)
		  		
		  	>web.xml 변경 
		  	> 서블릿 버전에 대한 설정을 2.5/2_5 에서 3.1/3_1로 변경 
		  	
		  	*** encoding과 관련된 필터를 등록하여 인코딩 설정을 진행 
		  	
		  	> 프로젝트 환경 설정 버전 변경 
		  		> java build path : jdk 추가 ( 사용하고있는 1.8 버전으로)
		  		> 3대장 추가 (서버, jre system, maven)
		  		> project facets : java 1.8 설정 dynamic web module 3.1설정 	
		  			> runtime 탭의 server 체크 후 apply	 
		  			
		  					
	  	10. 로그 레벨 설정 	
	  		> log4.xml의 root level을 debug로 변경 
	  				